(()=>{function M(){window.setTimeout(M,1e3);let r=new Date("07/27/2009 20:49:04"),d=new Date-r,a=Math.floor(d/(24*3600*1e3)),f=d%(24*3600*1e3),y=Math.floor(f/(3600*1e3)),h=f%(3600*1e3),u=Math.floor(h/(60*1e3)),t=h%(60*1e3),i=Math.floor(t/1e3),e=document.getElementById("run-time");e.innerHTML='<i class="far fa-clock fa-fw"></i> \u672C\u7AD9\u5DF2\u8FD0\u884C\u4E86 '+(a<10?"0":"")+a+" \u5929 "+(y<10?"0":"")+y+" \u65F6 "+(u<10?"0":"")+u+" \u5206 "+(i<10?"0":"")+i+" \u79D2 "}M();(function(r,l){typeof window=="object"&&(window[r]=l())})("Ribbons",function(){var r=window,l=document.body,d=document.documentElement,a=function(){if(arguments.length===1){if(Array.isArray(arguments[0])){var t=Math.round(a(0,arguments[0].length-1));return arguments[0][t]}return a(0,arguments[0])}else if(arguments.length===2)return Math.random()*(arguments[1]-arguments[0])+arguments[0];return 0},f=function(t){var i=Math.max(0,r.innerWidth||d.clientWidth||l.clientWidth||0),e=Math.max(0,r.innerHeight||d.clientHeight||l.clientHeight||0),o=Math.max(0,r.pageXOffset||d.scrollLeft||l.scrollLeft||0)-(d.clientLeft||0),c=Math.max(0,r.pageYOffset||d.scrollTop||l.scrollTop||0)-(d.clientTop||0);return{width:i,height:e,ratio:i/e,centerx:i/2,centery:e/2,scrollx:o,scrolly:c}},y=function(t){var i=f(t),e=t?Math.max(0,t.pageX||t.clientX||0):0,o=t?Math.max(0,t.pageY||t.clientY||0):0;return{mousex:e,mousey:o,centerx:e-i.width/2,centery:o-i.height/2}},h=function(t,i){this.x=0,this.y=0,this.set(t,i)};h.prototype={constructor:h,set:function(t,i){this.x=t||0,this.y=i||0},copy:function(t){return this.x=t.x||0,this.y=t.y||0,this},multiply:function(t,i){return this.x*=t||1,this.y*=i||1,this},divide:function(t,i){return this.x/=t||1,this.y/=i||1,this},add:function(t,i){return this.x+=t||0,this.y+=i||0,this},subtract:function(t,i){return this.x-=t||0,this.y-=i||0,this},clampX:function(t,i){return this.x=Math.max(t,Math.min(this.x,i)),this},clampY:function(t,i){return this.y=Math.max(t,Math.min(this.y,i)),this},flipX:function(){return this.x*=-1,this},flipY:function(){return this.y*=-1,this}};var u=function(t){this._canvas=null,this._context=null,this._sto=null,this._width=0,this._height=0,this._scroll=0,this._ribbons=[],this._options={id:"bgCanvas",colorSaturation:"70%",colorBrightness:"60%",colorAlpha:.6,colorCycleSpeed:6,verticalPosition:"center",horizontalSpeed:200,ribbonCount:3,strokeSize:0,parallaxAmount:-.5,animateSections:!0},this._onDraw=this._onDraw.bind(this),this._onResize=this._onResize.bind(this),this._onScroll=this._onScroll.bind(this),this.setOptions(t),this.init()};return u.prototype={constructor:u,setOptions:function(t){if(typeof t=="object")for(var i in t)t.hasOwnProperty(i)&&(this._options[i]=t[i])},init:function(){try{this._canvas=document.createElement("canvas"),this._canvas.style.display="block",this._canvas.style.position="fixed",this._canvas.style.margin="0",this._canvas.style.padding="0",this._canvas.style.border="0",this._canvas.style.outline="0",this._canvas.style.left="0",this._canvas.style.top="0",this._canvas.style.width="100%",this._canvas.style.height="100%",this._canvas.style["z-index"]="-1",this._canvas.style["background-color"]=this._options.backgroundColor,this._canvas.id=this._options.id,this._onResize(),this._context=this._canvas.getContext("2d"),this._context.clearRect(0,0,this._width,this._height),this._context.globalAlpha=this._options.colorAlpha,window.addEventListener("resize",this._onResize),window.addEventListener("scroll",this._onScroll),document.body.appendChild(this._canvas)}catch(t){console.warn("Canvas Context Error: "+t.toString());return}this._onDraw()},addRibbon:function(){var t=Math.round(a(1,9))>5?"right":"left",i=1e3,e=200,o=0-e,c=this._width+e,x=0,_=0,g=t==="right"?o:c,m=Math.round(a(0,this._height));/^(top|min)$/i.test(this._options.verticalPosition)?m=0+e:/^(middle|center)$/i.test(this._options.verticalPosition)?m=this._height/2:/^(bottom|max)$/i.test(this._options.verticalPosition)&&(m=this._height-e),this._options.parallaxAmount!==0&&(m+=this._scroll);for(var v=[],s=new h(g,m),n=new h(g,m),p=null,w=Math.round(a(0,360)),b=0;!(i<=0);){if(i--,x=Math.round((Math.random()*1-.2)*this._options.horizontalSpeed),_=Math.round((Math.random()*1-.5)*(this._height*.25)),p=new h,p.copy(n),t==="right"){if(p.add(x,_),n.x>=c)break}else if(t==="left"&&(p.subtract(x,_),n.x<=o))break;v.push({point1:new h(s.x,s.y),point2:new h(n.x,n.y),point3:p,color:w,delay:b,dir:t,alpha:0,phase:0}),s.copy(n),n.copy(p),b+=4,w+=this._options.colorCycleSpeed}this._ribbons.push(v)},_drawRibbonSection:function(t){if(t){if(t.phase>=1&&t.alpha<=0)return!0;if(t.delay<=0){if(t.phase+=.02,t.alpha=Math.sin(t.phase)*1,t.alpha=t.alpha<=0?0:t.alpha,t.alpha=t.alpha>=1?1:t.alpha,this._options.animateSections){var i=Math.sin(1+t.phase*Math.PI/2)*.1;t.dir==="right"?(t.point1.add(i,0),t.point2.add(i,0),t.point3.add(i,0)):(t.point1.subtract(i,0),t.point2.subtract(i,0),t.point3.subtract(i,0)),t.point1.add(0,i),t.point2.add(0,i),t.point3.add(0,i)}}else t.delay-=.5;var e=this._options.colorSaturation,o=this._options.colorBrightness,c="hsla("+t.color+", "+e+", "+o+", "+t.alpha+" )";this._context.save(),this._options.parallaxAmount!==0&&this._context.translate(0,this._scroll*this._options.parallaxAmount),this._context.beginPath(),this._context.moveTo(t.point1.x,t.point1.y),this._context.lineTo(t.point2.x,t.point2.y),this._context.lineTo(t.point3.x,t.point3.y),this._context.fillStyle=c,this._context.fill(),this._options.strokeSize>0&&(this._context.lineWidth=this._options.strokeSize,this._context.strokeStyle=c,this._context.lineCap="round",this._context.stroke()),this._context.restore()}return!1},_onDraw:function(){for(var t=0,i=this._ribbons.length;t<i;++t)this._ribbons[t]||this._ribbons.splice(t,1);this._context.clearRect(0,0,this._width,this._height);for(var e=0;e<this._ribbons.length;++e){for(var o=this._ribbons[e],c=o?o.length:0,x=0,_=0;_<c;++_)this._drawRibbonSection(o[_])&&x++;x>=c&&(this._ribbons[e]=null)}this._ribbons.length<this._options.ribbonCount&&Math.random()>.99&&this.addRibbon(),requestAnimationFrame(this._onDraw)},_onResize:function(t){var i=f(t);this._width=i.width,this._height=i.height,this._canvas&&(this._canvas.width=this._width,this._canvas.height=this._height,this._context&&(this._context.globalAlpha=this._options.colorAlpha))},_onScroll:function(t){var i=f(t);this._scroll=i.scrolly}},u});new Ribbons({ribbonCount:5,parallaxAmount:-.99});L2Dwidget.init({model:{scale:1,hHeadPos:.5,vHeadPos:.618,jsonPath:"https://unpkg.com/live2d-widget-model-hijiki@1.0.5/assets/hijiki.model.json"},display:{superSample:1,width:180,height:390,position:"left",hOffset:100,vOffset:-60},mobile:{show:!1,scale:1,motion:!0},react:{opacityDefault:1,opacityOnHover:1}});function S(){let r=[],l=!1,d,a=0,f,y,h,u,t,i=["#F73859","#14FFEC","#00E0FF","#FF99FE","#FAF15D"],e=document.createElement("canvas");document.body.appendChild(e),e.setAttribute("style","width: 100%; height: 100%; top: 0; left: 0; z-index: 99999; position: fixed; pointer-events: none;");let o=document.createElement("span");o.classList.add("pointer"),document.body.appendChild(o),e.getContext&&window.addEventListener?(t=e.getContext("2d"),c(),window.addEventListener("resize",c,!1),m(),window.addEventListener("mousedown",function(s){_(g(10,20),s.clientX,s.clientY),document.body.classList.add("is-pressed"),d=setTimeout(function(){document.body.classList.add("is-longpress"),l=!0},500)},!1),window.addEventListener("mouseup",function(s){clearInterval(d),l==!0&&(document.body.classList.remove("is-longpress"),_(g(50+Math.ceil(a),100+Math.ceil(a)),s.clientX,s.clientY),l=!1),document.body.classList.remove("is-pressed")},!1),window.addEventListener("mousemove",function(s){let n=s.clientX,p=s.clientY;o.style.top=p+"px",o.style.left=n+"px"},!1)):console.log("canvas or addEventListener is unsupported!");function c(){e.width=window.innerWidth*2,e.height=window.innerHeight*2,e.style.width=window.innerWidth+"px",e.style.height=window.innerHeight+"px",t.scale(2,2),f=e.width=window.innerWidth,y=e.height=window.innerHeight,h={x:f/2,y:y/2},u={x:f/2,y:y/2}}class x{constructor(n=h.x,p=h.y){this.x=n,this.y=p,this.angle=Math.PI*2*Math.random(),l==!0?this.multiplier=g(14+a,15+a):this.multiplier=g(6,12),this.vx=(this.multiplier+Math.random()*.5)*Math.cos(this.angle),this.vy=(this.multiplier+Math.random()*.5)*Math.sin(this.angle),this.r=g(8,12)+3*Math.random(),this.color=i[Math.floor(Math.random()*i.length)]}update(){this.x+=this.vx-u.x,this.y+=this.vy-u.y,u.x=-2/window.innerWidth*Math.sin(this.angle),u.y=-2/window.innerHeight*Math.cos(this.angle),this.r-=.3,this.vx*=.9,this.vy*=.9}}function _(s=1,n=h.x,p=h.y){for(let w=0;w<s;w++)r.push(new x(n,p))}function g(s,n){return Math.floor(Math.random()*n)+s}function m(){t.fillStyle="rgba(255, 255, 255, 0)",t.clearRect(0,0,e.width,e.height);for(let s=0;s<r.length;s++){let n=r[s];n.r<0||(t.fillStyle=n.color,t.beginPath(),t.arc(n.x,n.y,n.r,0,Math.PI*2,!1),t.fill(),n.update())}l==!0?a+=.2:!l&&a>=0&&(a-=.4),v(),requestAnimationFrame(m)}function v(){for(let s=0;s<r.length;s++){let n=r[s];(n.x+n.r<0||n.x-n.r>f||n.y+n.r<0||n.y-n.r>y||n.r<0)&&r.splice(s,1)}}}S();})();
//# sourceMappingURL=data:application/json;base64,
