(()=>{function u(){window.setTimeout(u,1e3);let n=new Date-new Date("07/27/2009 20:49:04"),o=Math.floor(n/(24*3600*1e3)),a=n%(24*3600*1e3),r=Math.floor(a/(3600*1e3)),s=a%(3600*1e3),i=Math.floor(s/(60*1e3)),d=s%(60*1e3),f=Math.floor(d/1e3),h=document.getElementById("run-time");h.innerHTML='<i class="far fa-clock fa-fw"></i> \u5DF2\u8FD0\u884C '+(o<10?"0":"")+o+" \u5929 "+(r<10?"0":"")+r+" \u65F6 "+(i<10?"0":"")+i+" \u5206 "+(f<10?"0":"")+f+" \u79D2 "}u();function w(t,e){return Math.floor(Math.random()*(e-t+1))+t}var m=Date.now(),l=0;function c(t){if(l+=1,l>=30){let e=Date.now(),n=e-m,o=Math.round(1e3/(n/l));m=e,l=0,p(o)}requestAnimationFrame(c)}var M=document.querySelector("#fps");function p(t){let e=w(-5,5);M.textContent=`${t+e} fps`}c();})();
//# sourceMappingURL=data:application/json;base64,
