(()=>{function A(){window.setTimeout(A,1e3);let a=new Date-new Date("07/27/2009 20:49:04"),h=Math.floor(a/(24*3600*1e3)),p=a%(24*3600*1e3),y=Math.floor(p/(3600*1e3)),r=p%(3600*1e3),_=Math.floor(r/(60*1e3)),t=r%(60*1e3),i=Math.floor(t/1e3),n=document.getElementById("run-time");n.innerHTML='<i class="far fa-clock fa-fw"></i> \u5DF2\u8FD0\u884C '+(h<10?"0":"")+h+" \u5929 "+(y<10?"0":"")+y+" \u65F6 "+(_<10?"0":"")+_+" \u5206 "+(i<10?"0":"")+i+" \u79D2 "}A();(function(s,e){typeof window=="object"&&(window[s]=e())})("Ribbons",function(){var s=window,e=document.body,a=document.documentElement,h=function(){if(arguments.length===1){if(Array.isArray(arguments[0])){var t=Math.round(h(0,arguments[0].length-1));return arguments[0][t]}return h(0,arguments[0])}else if(arguments.length===2)return Math.random()*(arguments[1]-arguments[0])+arguments[0];return 0},p=function(t){var i=Math.max(0,s.innerWidth||a.clientWidth||e.clientWidth||0),n=Math.max(0,s.innerHeight||a.clientHeight||e.clientHeight||0),o=Math.max(0,s.pageXOffset||a.scrollLeft||e.scrollLeft||0)-(a.clientLeft||0),l=Math.max(0,s.pageYOffset||a.scrollTop||e.scrollTop||0)-(a.clientTop||0);return{width:i,height:n,ratio:i/n,centerx:i/2,centery:n/2,scrollx:o,scrolly:l}},y=function(t){var i=p(t),n=t?Math.max(0,t.pageX||t.clientX||0):0,o=t?Math.max(0,t.pageY||t.clientY||0):0;return{mousex:n,mousey:o,centerx:n-i.width/2,centery:o-i.height/2}},r=function(t,i){this.x=0,this.y=0,this.set(t,i)};r.prototype={constructor:r,set:function(t,i){this.x=t||0,this.y=i||0},copy:function(t){return this.x=t.x||0,this.y=t.y||0,this},multiply:function(t,i){return this.x*=t||1,this.y*=i||1,this},divide:function(t,i){return this.x/=t||1,this.y/=i||1,this},add:function(t,i){return this.x+=t||0,this.y+=i||0,this},subtract:function(t,i){return this.x-=t||0,this.y-=i||0,this},clampX:function(t,i){return this.x=Math.max(t,Math.min(this.x,i)),this},clampY:function(t,i){return this.y=Math.max(t,Math.min(this.y,i)),this},flipX:function(){return this.x*=-1,this},flipY:function(){return this.y*=-1,this}};var _=function(t){this._canvas=null,this._context=null,this._sto=null,this._width=0,this._height=0,this._scroll=0,this._ribbons=[],this._options={id:"bgCanvas",colorSaturation:"70%",colorBrightness:"60%",colorAlpha:.6,colorCycleSpeed:6,verticalPosition:"center",horizontalSpeed:200,ribbonCount:3,strokeSize:0,parallaxAmount:-.5,animateSections:!0},this._onDraw=this._onDraw.bind(this),this._onResize=this._onResize.bind(this),this._onScroll=this._onScroll.bind(this),this.setOptions(t),this.init()};return _.prototype={constructor:_,setOptions:function(t){if(typeof t=="object")for(var i in t)t.hasOwnProperty(i)&&(this._options[i]=t[i])},init:function(){try{this._canvas=document.createElement("canvas"),this._canvas.style.display="block",this._canvas.style.position="fixed",this._canvas.style.margin="0",this._canvas.style.padding="0",this._canvas.style.border="0",this._canvas.style.outline="0",this._canvas.style.left="0",this._canvas.style.top="0",this._canvas.style.width="100%",this._canvas.style.height="100%",this._canvas.style["z-index"]="-1",this._canvas.style["background-color"]=this._options.backgroundColor,this._canvas.id=this._options.id,this._onResize(),this._context=this._canvas.getContext("2d"),this._context.clearRect(0,0,this._width,this._height),this._context.globalAlpha=this._options.colorAlpha,window.addEventListener("resize",this._onResize),window.addEventListener("scroll",this._onScroll),document.body.appendChild(this._canvas)}catch(t){console.warn("Canvas Context Error: "+t.toString());return}this._onDraw()},addRibbon:function(){var t=Math.round(h(1,9))>5?"right":"left",i=1e3,n=200,o=0-n,l=this._width+n,d=0,c=0,v=t==="right"?o:l,f=Math.round(h(0,this._height));/^(top|min)$/i.test(this._options.verticalPosition)?f=0+n:/^(middle|center)$/i.test(this._options.verticalPosition)?f=this._height/2:/^(bottom|max)$/i.test(this._options.verticalPosition)&&(f=this._height-n),this._options.parallaxAmount!==0&&(f+=this._scroll);for(var g=[],b=new r(v,f),u=new r(v,f),x=null,w=Math.round(h(0,360)),M=0;!(i<=0);){if(i--,d=Math.round((Math.random()*1-.2)*this._options.horizontalSpeed),c=Math.round((Math.random()*1-.5)*(this._height*.25)),x=new r,x.copy(u),t==="right"){if(x.add(d,c),u.x>=l)break}else if(t==="left"&&(x.subtract(d,c),u.x<=o))break;g.push({point1:new r(b.x,b.y),point2:new r(u.x,u.y),point3:x,color:w,delay:M,dir:t,alpha:0,phase:0}),b.copy(u),u.copy(x),M+=4,w+=this._options.colorCycleSpeed}this._ribbons.push(g)},_drawRibbonSection:function(t){if(t){if(t.phase>=1&&t.alpha<=0)return!0;if(t.delay<=0){if(t.phase+=.02,t.alpha=Math.sin(t.phase)*1,t.alpha=t.alpha<=0?0:t.alpha,t.alpha=t.alpha>=1?1:t.alpha,this._options.animateSections){var i=Math.sin(1+t.phase*Math.PI/2)*.1;t.dir==="right"?(t.point1.add(i,0),t.point2.add(i,0),t.point3.add(i,0)):(t.point1.subtract(i,0),t.point2.subtract(i,0),t.point3.subtract(i,0)),t.point1.add(0,i),t.point2.add(0,i),t.point3.add(0,i)}}else t.delay-=.5;var n=this._options.colorSaturation,o=this._options.colorBrightness,l="hsla("+t.color+", "+n+", "+o+", "+t.alpha+" )";this._context.save(),this._options.parallaxAmount!==0&&this._context.translate(0,this._scroll*this._options.parallaxAmount),this._context.beginPath(),this._context.moveTo(t.point1.x,t.point1.y),this._context.lineTo(t.point2.x,t.point2.y),this._context.lineTo(t.point3.x,t.point3.y),this._context.fillStyle=l,this._context.fill(),this._options.strokeSize>0&&(this._context.lineWidth=this._options.strokeSize,this._context.strokeStyle=l,this._context.lineCap="round",this._context.stroke()),this._context.restore()}return!1},_onDraw:function(){for(var t=0,i=this._ribbons.length;t<i;++t)this._ribbons[t]||this._ribbons.splice(t,1);this._context.clearRect(0,0,this._width,this._height);for(var n=0;n<this._ribbons.length;++n){for(var o=this._ribbons[n],l=o?o.length:0,d=0,c=0;c<l;++c)this._drawRibbonSection(o[c])&&d++;d>=l&&(this._ribbons[n]=null)}this._ribbons.length<this._options.ribbonCount&&Math.random()>.99&&this.addRibbon(),requestAnimationFrame(this._onDraw)},_onResize:function(t){var i=p(t);this._width=i.width,this._height=i.height,this._canvas&&(this._canvas.width=this._width,this._canvas.height=this._height,this._context&&(this._context.globalAlpha=this._options.colorAlpha))},_onScroll:function(t){var i=p(t);this._scroll=i.scrolly}},_});new Ribbons({ribbonCount:5,parallaxAmount:-.99});function C(s,e){return Math.floor(Math.random()*(e-s+1))+s}var S=Date.now(),m=0;function R(s){if(m+=1,m>=30){let e=Date.now(),a=e-S,h=Math.round(1e3/(a/m));S=e,m=0,z(h)}requestAnimationFrame(R)}var T=document.querySelector("#fps");function z(s){let e=C(-5,5);T.textContent=`${s+e} fps`}R();})();
//# sourceMappingURL=data:application/json;base64,
